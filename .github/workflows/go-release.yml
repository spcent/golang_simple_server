name: Go CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: CI - Test & Build Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./... -v -cover

      - name: Build binary
        run: |
          mkdir -p bin/${{ matrix.os }}/${{ matrix.arch }}
          ext=""
          if [ "${{ matrix.os }}" = "windows-latest" ]; then ext=".exe"; fi
          GOOS=${{ matrix.os == 'windows-latest' && echo 'windows' || echo matrix.os | sed 's/-latest//'}} \
          GOARCH=${{ matrix.arch }} \
          go build -o bin/${{ matrix.os }}/${{ matrix.arch }}/myapp$ext

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.os }}/${{ matrix.arch }}/

  release:
    name: Release
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: bin/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: bin/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
